openapi: 3.0.3
info:
  title: Orchestrator Alpha API
  description: |
    # Elite AI Agent Team for Autonomous App Development
    
    The Orchestrator Alpha API provides comprehensive endpoints for managing AI agents, 
    generating applications, and coordinating autonomous development workflows.
    
    ## Features
    - Multi-agent coordination and communication
    - Real-time application generation
    - Project management and tracking  
    - Performance monitoring and analytics
    - Security and authentication
    
    ## Authentication
    All endpoints require authentication via JWT tokens or API keys.
  version: 3.1.0
  contact:
    name: Orchestrator Alpha Team
    email: support@autonomous-dev.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.autonomous-dev.com
    description: Production server

security:
  - bearerAuth: []
  - apiKeyAuth: []

tags:
  - name: Projects
    description: Project management and generation
  - name: Agents
    description: AI agent management and communication
  - name: Generation
    description: Code generation and templates
  - name: Monitoring
    description: System monitoring and analytics
  - name: Security
    description: Authentication and authorization

paths:
  /api/projects:
    get:
      tags: [Projects]
      summary: List all projects
      description: Retrieve a paginated list of all projects
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Items per page
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, in_progress, completed, failed]
          description: Filter by project status
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    
    post:
      tags: [Projects]
      summary: Create new project
      description: Create a new project with AI agent generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/projects/{projectId}:
    get:
      tags: [Projects]
      summary: Get project details
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags: [Projects]
      summary: Update project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      tags: [Projects]
      summary: Delete project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Project deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /api/projects/{projectId}/generate:
    post:
      tags: [Generation]
      summary: Generate project code
      description: Trigger AI agents to generate code for the project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerationRequest'
      responses:
        '202':
          description: Generation started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerationResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/agents:
    get:
      tags: [Agents]
      summary: List all agents
      description: Get status and information for all AI agents
      responses:
        '200':
          description: List of agents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agent'

  /api/agents/{agentId}/status:
    get:
      tags: [Agents]
      summary: Get agent status
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agent status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentStatus'

  /api/agents/{agentId}/communicate:
    post:
      tags: [Agents]
      summary: Send message to agent
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentMessage'
      responses:
        '200':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'

  /api/templates:
    get:
      tags: [Generation]
      summary: List available templates
      responses:
        '200':
          description: Available templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'

  /api/health:
    get:
      tags: [Monitoring]
      summary: Health check
      security: []
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'

  /api/metrics:
    get:
      tags: [Monitoring]
      summary: System metrics
      responses:
        '200':
          description: Performance metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'

  /api/auth/login:
    post:
      tags: [Security]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Project:
      type: object
      properties:
        id:
          type: string
          example: "proj_123456"
        name:
          type: string
          example: "E-commerce Platform"
        description:
          type: string
          example: "Full-stack e-commerce application with React and Node.js"
        status:
          type: string
          enum: [pending, in_progress, completed, failed]
        requirements:
          $ref: '#/components/schemas/ProjectRequirements'
        configuration:
          $ref: '#/components/schemas/ProjectConfiguration'
        agents:
          type: array
          items:
            type: string
          example: ["frontend", "backend", "database"]
        progress:
          type: object
          properties:
            percentage:
              type: number
              example: 75.5
            currentTask:
              type: string
              example: "Generating API documentation"
            estimatedCompletion:
              type: string
              format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true

    ProjectRequest:
      type: object
      required:
        - name
        - description
        - requirements
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Task Management App"
        description:
          type: string
          minLength: 10
          maxLength: 1000
          example: "A collaborative task management application with real-time updates"
        requirements:
          $ref: '#/components/schemas/ProjectRequirements'
        configuration:
          $ref: '#/components/schemas/ProjectConfiguration'

    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        requirements:
          $ref: '#/components/schemas/ProjectRequirements'
        configuration:
          $ref: '#/components/schemas/ProjectConfiguration'

    ProjectRequirements:
      type: object
      properties:
        techStack:
          type: object
          properties:
            frontend:
              type: string
              enum: [react, vue, angular, svelte]
              example: "react"
            backend:
              type: string
              enum: [nodejs, python, java, go]
              example: "nodejs"
            database:
              type: string
              enum: [postgresql, mysql, mongodb, sqlite]
              example: "postgresql"
            authentication:
              type: boolean
              example: true
        features:
          type: array
          items:
            type: string
          example: ["user management", "real-time updates", "file upload"]
        integrations:
          type: array
          items:
            type: string
          example: ["stripe", "sendgrid", "aws-s3"]
        deployment:
          type: string
          enum: [docker, kubernetes, vercel, aws, gcp, azure]
          example: "docker"

    ProjectConfiguration:
      type: object
      properties:
        aiProvider:
          type: string
          enum: [claude, openai, google, local]
          example: "claude"
        performance:
          type: object
          properties:
            targetLatency:
              type: number
              example: 100
            maxConcurrentUsers:
              type: number
              example: 1000
        security:
          type: object
          properties:
            encryptionEnabled:
              type: boolean
              example: true
            rateLimitEnabled:
              type: boolean
              example: true
        quality:
          type: object
          properties:
            testCoverage:
              type: number
              minimum: 0
              maximum: 100
              example: 90
            codeQuality:
              type: string
              enum: [basic, standard, strict]
              example: "standard"

    GenerationRequest:
      type: object
      properties:
        agents:
          type: array
          items:
            type: string
          example: ["frontend", "backend", "database"]
        priority:
          type: string
          enum: [low, normal, high]
          default: normal
        options:
          type: object
          properties:
            incremental:
              type: boolean
              example: false
            preview:
              type: boolean
              example: false

    GenerationResponse:
      type: object
      properties:
        jobId:
          type: string
          example: "job_789012"
        status:
          type: string
          enum: [queued, running, completed, failed]
        estimatedDuration:
          type: number
          example: 300
        progress:
          type: object
          properties:
            percentage:
              type: number
            currentAgent:
              type: string
            currentTask:
              type: string

    Agent:
      type: object
      properties:
        id:
          type: string
          example: "frontend-agent"
        name:
          type: string
          example: "Frontend Developer"
        type:
          type: string
          enum: [project_manager, architect, frontend, backend, database, testing, devops, documentation, security]
        status:
          type: string
          enum: [idle, busy, error, offline]
        capabilities:
          type: array
          items:
            type: string
          example: ["react", "vue", "angular", "typescript"]
        performance:
          type: object
          properties:
            averageResponseTime:
              type: number
              example: 2.3
            successRate:
              type: number
              example: 98.7
            tasksCompleted:
              type: number
              example: 1247

    AgentStatus:
      type: object
      properties:
        status:
          type: string
          enum: [idle, busy, error, offline]
        currentTask:
          type: string
          nullable: true
        lastActivity:
          type: string
          format: date-time
        performance:
          type: object
          properties:
            cpuUsage:
              type: number
            memoryUsage:
              type: number
            responseTime:
              type: number

    AgentMessage:
      type: object
      required:
        - message
        - type
      properties:
        message:
          type: string
          example: "Generate React component for user dashboard"
        type:
          type: string
          enum: [task, query, update]
        context:
          type: object
          additionalProperties: true
        priority:
          type: string
          enum: [low, normal, high]
          default: normal

    AgentResponse:
      type: object
      properties:
        messageId:
          type: string
        status:
          type: string
          enum: [received, processing, completed, error]
        response:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time

    Template:
      type: object
      properties:
        id:
          type: string
          example: "ecommerce-template"
        name:
          type: string
          example: "E-commerce Platform"
        description:
          type: string
          example: "Complete e-commerce solution with shopping cart and payments"
        category:
          type: string
          enum: [web-app, mobile-app, api, microservice]
        techStack:
          type: array
          items:
            type: string
          example: ["react", "nodejs", "postgresql"]
        features:
          type: array
          items:
            type: string
        estimatedDuration:
          type: number
          example: 300

    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "3.1.0"
        uptime:
          type: number
          example: 86400
        services:
          type: object
          properties:
            database:
              type: string
              enum: [healthy, degraded, unhealthy]
            redis:
              type: string
              enum: [healthy, degraded, unhealthy]
            agents:
              type: object
              additionalProperties:
                type: string
                enum: [healthy, degraded, unhealthy]

    Metrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        system:
          type: object
          properties:
            cpuUsage:
              type: number
            memoryUsage:
              type: number
            diskUsage:
              type: number
        performance:
          type: object
          properties:
            requestsPerSecond:
              type: number
            averageResponseTime:
              type: number
            errorRate:
              type: number
        agents:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
              tasksCompleted:
                type: number
              averageTaskTime:
                type: number

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "refresh_token_here"
        expiresIn:
          type: number
          example: 3600
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            role:
              type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        pages:
          type: integer
          example: 5

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Invalid request parameters"
            details:
              type: array
              items:
                type: string
            timestamp:
              type: string
              format: date-time

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'