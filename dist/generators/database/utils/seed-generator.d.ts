import { DatabaseGenerator, SchemaTemplate } from '../index';
export interface SeedConfig {
    table: string;
    count: number;
    data?: Record<string, any>[];
    relations?: RelationSeedConfig[];
}
export interface RelationSeedConfig {
    field: string;
    table: string;
    strategy: 'random' | 'sequential' | 'fixed';
    value?: any;
}
export interface FieldGeneratorConfig {
    type: string;
    options?: Record<string, any>;
}
export declare class SeedGenerator {
    private generator;
    private faker;
    constructor(generator: DatabaseGenerator);
    private initializeFaker;
    generateSeeds(template: SchemaTemplate, configs: SeedConfig[]): Promise<string>;
    private generateTableData;
    private isAutoGeneratedField;
    private generateFieldValue;
    private generateRelationValue;
    private generateStringValue;
    private generateTextValue;
    private generateIntegerValue;
    private generateDecimalValue;
    private generateDateValue;
    private generateJsonValue;
    generateSeedTemplate(template: SchemaTemplate): SeedConfig[];
    private generateRelationConfigs;
    generateFactoryFile(template: SchemaTemplate): Promise<string>;
    private generatePostgresFactory;
    private generateMongoFactory;
    private generateFactoryFieldValue;
    private generateFactoryStringValue;
    private toPascalCase;
}
//# sourceMappingURL=seed-generator.d.ts.map